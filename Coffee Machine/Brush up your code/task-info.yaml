type: edu
custom_name: stage6
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\nimport java.util.Scanner;\n\npublic class CoffeeMachine\
    \ {\n    static Scanner scan = new Scanner(System.in);\n    static final int WATER=\
    \ 200;\n    static final int MILK = 50;\n    static final int BEAN = 15;\n   \
    \ \n    public static void main(String[] args) {\n        // System.out.println(\"\
    Starting to make a coffee\");\n        // System.out.println(\"Grinding coffee\
    \ beans\");\n        // System.out.println(\"Boiling water\");\n        // System.out.println(\"\
    Mixing boiled water with crushed coffee beans\");\n        // System.out.println(\"\
    Pouring coffee into the cup\");\n        // System.out.println(\"Pouring some\
    \ milk into the cup\");\n        // System.out.println(\"Coffee is ready!\");\n\
    \        \n        System.out.println(\"Write how many ml of water the coffee\
    \ machine has:\");\n        int availWater = scan.nextInt();\n        System.out.println(\"\
    Write how many ml of milk the coffee machine has:\");\n        int availMilk =\
    \ scan.nextInt();\n        System.out.println(\"Write how many grams of coffee\
    \ beans the coffee machine has:\");\n        int availBeans = scan.nextInt();\n\
    \        System.out.println(\"Write how many cups of coffee you will need:\");\n\
    \        int needCups = scan.nextInt();\n\n        int amountCups = calcCups(availWater,availMilk,availBeans);\n\
    \n        if (needCups == amountCups) {\n            System.out.println(\"Yes,\
    \ I can make that amount of coffee\");\n        }\n        if (needCups > amountCups)\
    \ {\n            System.out.printf(\"No, I can make only %d cup(s) of coffee\\\
    n\", amountCups);\n        }\n        if (needCups < amountCups) {\n         \
    \   amountCups -= needCups;\n            System.out.printf(\"Yes, I can make that\
    \ amount of coffee (and even %d more than that)\", amountCups);\n        }\n \
    \       \n         \n    }\n    \n    public static void calculateCups(int cups){\n\
    \        int water = 200;\n        int milk = 50;\n        int beans = 15;\n \
    \       \n        water *= cups;\n        milk *= cups;\n        beans *= cups;\n\
    \        \n        System.out.printf(\"For %d cups of coffee you will need: \\\
    n\", cups);\n        System.out.printf(\"%d ml of water\\n\", water);\n      \
    \  System.out.printf(\"%d ml of milk\\n\", milk);\n        System.out.printf(\"\
    %d g of coffee beans\\n\", beans);\n        \n    }\n\n    public static int calcCups(int\
    \ availWater, int availMilk, int availBeans){\n        int remCups = 0;\n\n  \
    \      while (true){\n            if (availWater >= WATER && availMilk >= MILK\
    \ && availBeans >= BEAN) {\n                ++remCups;\n            } else {\n\
    \                break;\n            }\n            availWater -= WATER;\n   \
    \         availMilk -= MILK;\n            availBeans -= BEAN;\n        }\n   \
    \     return remCups;\n    }\n\n}\n"
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/Coffee.java
  visible: true
  text: |
    package machine;

    public class Coffee {
        private int availWater = 400;
        private int availMilk = 540;
        private int availBeans = 120;
        private int disposableCups = 9;
        private int cash = 550;

        public Coffee() {

        }

        public int getAvailWater() {
            return availWater;
        }

        public int getAvailMilk() {
            return availMilk;
        }

        public int getAvailBeans() {
            return availBeans;
        }

        public int getDisposableCups() {
            return disposableCups;
        }

        public int getCash() {
            return cash;
        }

        public void fillAdd(int water, int milk, int beans, int cups){
            this.availWater += water;
            this.availMilk += milk;
            this.availBeans += beans;
            this.disposableCups += cups;
        }

        public void subtractBuy(int choice){
            //Expresso
            if (choice == 1) {
                if (availWater < 250) {
                    System.out.println("Sorry, not enough water!");
                } else if (availBeans < 16) {
                    System.out.println("Sorry, not enough coffee beans");
                } else if (disposableCups == 0) {
                    System.out.println("Sorry, not enough disposable cups!");
                } else {
                    System.out.println("I have enough resources, making you a coffee!");
                    this.availWater -= 250;
                    this.availBeans -= 16;
                    this.disposableCups -= 1;
                    this.cash += 4;
                }
            }
            //Latte
            if (choice == 2) {
                if (availWater < 350) {
                    System.out.println("Sorry, not enough water!");
                } else if (availMilk < 75) {
                    System.out.println("Sorry, not enough milk!");
                } else if (availBeans < 20) {
                    System.out.println("Sorry, not enough coffee beans");
                } else if (disposableCups == 0) {
                    System.out.println("Sorry, not enough disposable cups!");
                } else {
                    System.out.println("I have enough resources, making you a coffee!");
                    this.availWater -= 350;
                    this.availMilk -= 75;
                    this.availBeans -= 20;
                    this.disposableCups -= 1;
                    this.cash += 7;
                }
            }
            //Cappucino
            if (choice == 3) {
                if (availWater < 200) {
                    System.out.println("Sorry, not enough water!");
                } else if (availMilk < 100) {
                    System.out.println("Sorry, not enough milk!");
                } else if (availBeans < 12) {
                    System.out.println("Sorry, not enough coffee beans");
                } else if (disposableCups == 0) {
                    System.out.println("Sorry, not enough disposable cups!");
                } else {
                    System.out.println("I have enough resources, making you a coffee!");
                    this.availWater -= 200;
                    this.availMilk -= 100;
                    this.availBeans -= 12;
                    this.disposableCups -= 1;
                    this.cash += 6;
                }
            }
        }
        public int takeCash(){
            int cash1 = this.cash;
            this.cash = 0;
            return cash1;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/180/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Tue, 03 May 2022 20:40:46 UTC
record: -1
